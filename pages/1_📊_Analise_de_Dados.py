import os
import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title='An√°lise de Dados - Games', page_icon='üìä', layout='wide')
st.sidebar.title('Navega√ß√£o')

def load_data():
    df = pd.read_csv('./games_db.csv')

    # Limpeza / Convers√£o de tipos
    df['Year_of_Release'] = pd.to_numeric(df['Year_of_Release'], errors='coerce').astype('Int64')
    df['Critic_Score'] = pd.to_numeric(df['Critic_Score'], errors='coerce')
    df['Critic_Count'] = pd.to_numeric(df['Critic_Count'], errors='coerce')
    df['User_Score'] = pd.to_numeric(df['User_Score'], errors='coerce')
    df['User_Count'] = pd.to_numeric(df['User_Count'], errors='coerce')

    for col in ['Name','Platform','Genre','Publisher','Developer','Rating']:
        if col in df.columns:
            df[col] = df[col].astype('string')

    # Converte vendas negativas para 0
    for c in ['NA_Sales','EU_Sales','JP_Sales','Other_Sales','Global_Sales']:
        if c in df.columns:
            df[c] = pd.to_numeric(df[c], errors='coerce').clip(lower=0)
    return df

df = load_data()
st.title('üìä An√°lise de Dados de Games')
st.divider()
st.caption('Escolha a An√°lise na Barra Lateral.')
st.caption('Use os Filtros Abaixo')

with st.expander('‚öôÔ∏è Filtros', expanded=False):
    if df['Year_of_Release'].dropna().empty:
        ano_inicial, ano_final = 1980, 2025
    else:
        ano_inicial = int(df['Year_of_Release'].dropna().min())
        ano_final = int(df['Year_of_Release'].dropna().max())
    periodo = st.slider('Ano de lan√ßamento', ano_inicial, ano_final, (ano_inicial, ano_final))

    plataformas = sorted(df['Platform'].dropna().unique().tolist()) if 'Platform' in df.columns else []
    generos = sorted(df['Genre'].dropna().unique().tolist())    if 'Genre' in df.columns else []
    publishers = sorted(df['Publisher'].dropna().unique().tolist()) if 'Publisher' in df.columns else []

    sel_plataformas = st.multiselect('Plataformas', plataformas, default=plataformas)
    sel_generos = st.multiselect('G√™neros',    generos,    default=generos)
    sel_publishers = st.multiselect('Publishers (opcional)', publishers, default=[])

# Aplica os Filtros
mask = (
    df['Year_of_Release'].between(periodo[0], periodo[1], inclusive='both')
) & (df['Platform'].isin(sel_plataformas)) & (df['Genre'].isin(sel_generos))
if sel_publishers:
    mask &= df['Publisher'].isin(sel_publishers)

df_f = df[mask].copy()

col_k1, col_k2, col_k3, col_k4 = st.columns(4)
with col_k1:
    st.metric('üéÆ Jogos', f'{len(df_f):,}'.replace(",", "."))
with col_k2:
    st.metric('üåç Vendas Globais (mi)', f"{df_f['Global_Sales'].sum():.2f}")
with col_k3:
    st.metric('üìÖ Per√≠odo', f'{periodo[0]}‚Äì{periodo[1]}')
with col_k4:
    st.metric('üß© G√™neros', f"{df_f['Genre'].nunique()}")

st.divider()

# An√°lise: tend√™ncia de lan√ßamentos por ano
def tendencia_lancamentos(data: pd.DataFrame):
    s = data.dropna(subset=['Year_of_Release']).groupby('Year_of_Release')['Name'].count().reset_index()
    if s.empty:
        st.info('Sem dados suficientes para esta visualiza√ß√£o.')
        return
    fig = px.line(
        s, x='Year_of_Release', y='Name', markers=True,
        title='Tend√™ncia de Lan√ßamentos por Ano',
        labels={'Year_of_Release': 'Ano', 'Name': 'Qtde de jogos'}
    )
    fig.update_layout(template='plotly_dark')
    st.plotly_chart(fig, use_container_width=True)

# An√°lise: g√™neros mais populares
def generos_populares(data: pd.DataFrame):
    s = data.groupby('Genre')['Name'].count().sort_values(ascending=False).reset_index()
    if s.empty:
        st.info('Sem dados suficientes para esta visualiza√ß√£o.')
        return
    fig = px.bar(
        s, x='Genre', y='Name', text='Name',
        title='G√™neros Mais Populares (por n¬∫ de jogos)',
        labels={'Genre': 'G√™nero', 'Name':'Qtde de jogos'}
    )
    fig.update_traces(textposition='outside')
    fig.update_layout(template='plotly_dark', xaxis_tickangle=30)
    st.plotly_chart(fig, use_container_width=True)

# An√°lise: plataformas com mais lan√ßamentos
def lancamentos_plataformas(data: pd.DataFrame):
    s = data.groupby('Platform')['Name'].count().sort_values(ascending=False).reset_index()
    if s.empty:
        st.info('Sem dados suficientes para esta visualiza√ß√£o.')
        return
    fig = px.bar(
        s, x='Platform', y='Name', text='Name',
        title='Plataformas com Mais Lan√ßamentos',
        labels={'Platform': 'Plataforma', 'Name':'Qtde de jogos'}
    )
    fig.update_traces(textposition='outside')
    fig.update_layout(template='plotly_dark')
    st.plotly_chart(fig, use_container_width=True)

# An√°lise: top 10 jogos por vendas globais
def vendas_globais(data: pd.DataFrame):
    top = (data[['Name','Platform','Global_Sales']]
           .dropna(subset=['Global_Sales'])
           .sort_values('Global_Sales', ascending=False)
           .head(10))
    if top.empty:
        st.info('Sem dados suficientes para esta visualiza√ß√£o.')
        return
    fig = px.bar(
        top[::-1],  # inverte para mostrar o 1¬∫ no topo
        x='Global_Sales', y='Name',
        orientation='h', text='Global_Sales',
        title='Top 10 Jogos por Vendas Globais (milh√µes)',
        labels={'Global_Sales':'Vendas globais (mi)', 'Name':'Jogo'}
    )
    fig.update_traces(texttemplate='%{text:.2f}')
    fig.update_layout(template='plotly_dark', yaxis={'categoryorder':'total ascending'})
    st.plotly_chart(fig, use_container_width=True)

# An√°lise: vendas por regi√£o
def vendas_regiao(data: pd.DataFrame):
    sales_cols = [c for c in ['NA_Sales','EU_Sales','JP_Sales','Other_Sales'] if c in data.columns]
    if not sales_cols:
        st.info('Colunas de vendas por regi√£o n√£o encontradas.')
        return
    s = data[sales_cols].sum().reset_index()
    s.columns = ['Regi√£o','Vendas']
    if s.empty:
        st.info('Sem dados suficientes para esta visualiza√ß√£o.')
        return
    fig = px.bar(
        s, x='Regi√£o', y='Vendas', text='Vendas',
        title='Distribui√ß√£o de Vendas por Regi√£o (milh√µes)',
        labels={'Vendas':'Vendas (mi)'}
    )
    fig.update_traces(texttemplate='%{text:.1f}', textposition='outside')
    fig.update_layout(template='plotly_dark')
    st.plotly_chart(fig, use_container_width=True)

# An√°lise: correla√ß√£o entre notas de cr√≠ticos e usu√°rios
def correlacao_notas(data: pd.DataFrame):
    d = data[['Critic_Score','User_Score','Name','Platform','Genre']].dropna()
    if d.empty:
        st.info('Sem dados suficientes de notas nos filtros atuais.')
        return
    d = d.assign(Critic_Score_10 = d['Critic_Score'] / 10.0)

    # tenta trendline OLS (statsmodels); se n√£o houver, mostra sem tend√™ncia
    try:
        fig = px.scatter(
            d, x='Critic_Score_10', y='User_Score',
            hover_data=['Name','Platform','Genre'],
            trendline='ols',
            title='Correla√ß√£o: Nota de Cr√≠ticos (0‚Äì10) x Usu√°rios (0‚Äì10)',
            labels={'Critic_Score_10':'Cr√≠ticos (0‚Äì10)', 'User_Score':'Usu√°rios (0‚Äì10)'}
        )
    except Exception:
        st.warning("Trendline OLS indispon√≠vel (instale 'statsmodels'). Exibindo scatter sem tend√™ncia.")
        fig = px.scatter(
            d, x='Critic_Score_10', y='User_Score',
            hover_data=['Name','Platform','Genre'],
            title='Correla√ß√£o: Nota de Cr√≠ticos (0‚Äì10) x Usu√°rios (0‚Äì10)',
            labels={'Critic_Score_10':'Cr√≠ticos (0‚Äì10)', 'User_Score':'Usu√°rios (0‚Äì10)'}
        )
    fig.update_layout(template='plotly_dark')
    st.plotly_chart(fig, use_container_width=True)

# An√°lise: vendas por classifica√ß√£o et√°ria
def vendas_classificacao_etaria(data: pd.DataFrame):
    if 'Rating' not in data.columns or data['Rating'].dropna().empty:
        st.info('Sem dados de classifica√ß√£o et√°ria (Rating) para os filtros atuais.')
        return
    s = data.dropna(subset=['Rating']).groupby('Rating')['Global_Sales'].sum().reset_index()
    s = s.sort_values('Global_Sales', ascending=False)
    if s.empty:
        st.info('Sem dados suficientes para esta visualiza√ß√£o.')
        return
    fig = px.bar(
        s, x='Rating', y='Global_Sales', text='Global_Sales',
        title='Vendas Globais por Classifica√ß√£o Et√°ria (milh√µes)',
        labels={'Rating':'Rating', 'Global_Sales':'Vendas (mi)'}
    )
    fig.update_traces(texttemplate='%{text:.1f}', textposition='outside')
    fig.update_layout(template='plotly_dark')
    st.plotly_chart(fig, use_container_width=True)

#Visao geral dos dados
def visao_geral():
    st.subheader('üìå Vis√£o Geral dos Dados')
    with st.expander('Visualizar amostra da base', expanded=False):
        st.dataframe(df_f.head(25), use_container_width=True)

analises = st.sidebar.radio(
    'Escolha a an√°lise',
    [
        'Vis√£o Geral',
        'Tend√™ncia de Lan√ßamentos por Ano',
        'G√™neros Mais Populares',
        'Plataformas com Mais Lan√ßamentos',
        'Top 10 Jogos por Vendas Globais',
        'Vendas por Regi√£o',
        'Notas: Cr√≠ticos vs Usu√°rios',
        'Vendas por Classifica√ß√£o Et√°ria (Rating)'
    ],
    index=0
)

def mostrar_dicionario_variaveis():
    data = [("Name", "Qualitativa", "Nominal", "Nome do jogo ‚Üí identifica√ß√£o, n√£o possui ordem."),
            ("Platform", "Qualitativa", "Nominal", "Plataforma (PS4, Xbox, etc.), categorias sem hierarquia."),
            ("Year_of_Release", "Quantitativa", "Discreta", "Anos inteiros (1980, 2005...), n√£o fracionados."),
            ("Genre", "Qualitativa", "Nominal", "Categoria de jogo (Action, Sports, RPG...), sem hierarquia."),
            ("Publisher", "Qualitativa", "Nominal", "Nome da empresa (Nintendo, EA, etc.), apenas r√≥tulos."),
            ("Developer", "Qualitativa", "Nominal", "Nome do est√∫dio desenvolvedor, apenas r√≥tulos."),
            ("Rating", "Qualitativa", "Ordinal", "Classifica√ß√£o et√°ria (E, T, M, AO...), ordem impl√≠cita."),
            ("NA_Sales", "Quantitativa", "Cont√≠nua", "Vendas em milh√µes (pode ser 1.52, 0.03, etc.)."),
            ("EU_Sales", "Quantitativa", "Cont√≠nua", "Vendas na Europa, fracionadas."),
            ("JP_Sales", "Quantitativa", "Cont√≠nua", "Vendas no Jap√£o, fracionadas."),
            ("Other_Sales", "Quantitativa", "Cont√≠nua", "Vendas em outras regi√µes, fracionadas."),
            ("Global_Sales", "Quantitativa", "Cont√≠nua", "Soma das vendas, fracionadas."),
            ("Critic_Score", "Quantitativa", "Cont√≠nua", "Nota m√©dia (0‚Äì100), pode ter decimais."),
            ("Critic_Count", "Quantitativa", "Discreta", "N√∫mero de cr√≠ticos (contagem inteira)."),
            ("User_Score", "Quantitativa", "Cont√≠nua", "Nota m√©dia (0‚Äì10), pode ter decimais."),
            ("User_Count", "Quantitativa", "Discreta", "N√∫mero de usu√°rios (contagem inteira).")]
    df_dict = pd.DataFrame(data, columns=["Coluna", "Tipo", "Subtipo", "Justificativa"])
    st.dataframe(df_dict, use_container_width=True)

# Switch-case para exibir a an√°lise escolhida
match analises:
    case 'Vis√£o Geral':
        st.subheader('üìå Vis√£o Geral dos Dados')
        st.write('Base de dados: Vendas e An√°lises de Jogos *(1980 - 2020)*')
        with st.expander('Visualizar amostra da base', expanded=False):
            st.dataframe(df_f.head(25), use_container_width=True)
        st.divider()
        st.subheader('üìã Descri√ß√£o das Colunas')
        col1, col2 = st.columns(2)
        with col1:
            st.markdown('''
            - **Name**: Nome do jogo
            - **Platform**: Plataforma (ex: PS4, XOne, PC)
            - **Year_of_Release**: Ano de lan√ßamento
            - **Genre**: G√™nero do jogo (ex: Action, Sports)
            - **Publisher**: Empresa publicadora
            - **Developer**: Empresa desenvolvedora
            - **Other_Sales**: Vendas em outras regi√µes (milh√µes)
            - **Global_Sales**: Vendas globais (milh√µes)
            ''')
        with col2:
            st.markdown('''
            - **NA_Sales**: Vendas na Am√©rica do Norte (milh√µes)
            - **EU_Sales**: Vendas na Europa (milh√µes)
            - **JP_Sales**: Vendas no Jap√£o (milh√µes)
            - **Critic_Score**: Nota m√©dia dos cr√≠ticos (0-100)
            - **Critic_Count**: N√∫mero de cr√≠ticas recebidas
            - **User_Score**: Nota m√©dia dos usu√°rios (0-10)
            - **User_Count**: N√∫mero de avalia√ß√µes dos usu√°rios
            - **Rating**: Classifica√ß√£o et√°ria (ESRB) (ex: E, T, M)
            ''')
        st.divider()
        st.subheader('üìà Identifica√ß√£o do tipo das vari√°veis')
        mostrar_dicionario_variaveis()
        st.divider()
        st.subheader('‚ùî Principais Perguntas da An√°lise de Dados')
        col1, col2 = st.columns(2)
        with col1:
            st.markdown('''
            >**1. Tend√™ncia de Lan√ßamentos por Ano**
            - Quais anos tiveram picos ou quedas significativas?
            - Existe uma tend√™ncia de crescimento ou decl√≠nio no n√∫mero de lan√ßamentos?
            \n
            >**2. G√™neros Mais Populares**
            - Quais s√£o os g√™neros mais populares em termos de lan√ßamentos?
            - Quais g√™neros geram mais vendas globais?
            \n
            >**3. Plataformas com Mais Lan√ßamentos**
            - Quais plataformas t√™m o maior n√∫mero de lan√ßamentos?
            - Existe uma correla√ß√£o entre o n√∫mero de lan√ßamentos e as vendas globais por plataforma?
            \n
            >**4. Vendas por Regi√£o**
            - Quais regi√µes apresentam as maiores vendas de jogos?
            - Existem diferen√ßas significativas nas prefer√™ncias de jogos entre regi√µes?
            ''')
        with col2:
            st.markdown('''
            >**5. Notas: Cr√≠ticos vs Usu√°rios**
            - Quais jogos apresentam maior discrep√¢ncia entre as avalia√ß√µes de cr√≠ticos e usu√°rios?
            - As notas influenciam as vendas globais dos jogos?
            \n
            >**6. Vendas por Classifica√ß√£o Et√°ria**
            - Quais classifica√ß√µes et√°rias (ESRB) geram mais vendas?
            - Como a distribui√ß√£o de vendas por classifica√ß√£o et√°ria mudou ao longo do tempo?
            \n
            >**7. Publicadoras e Desenvolvedoras**
            - Quais publicadoras e desenvolvedoras lan√ßaram mais jogos?
            - Quais publicadoras t√™m os jogos mais bem avaliados?
            \n
            >**8. Jogos de Maior Sucesso**
            - Quais jogos tiveram as maiores vendas globais?
            - Quais s√£o os jogos mais populares por g√™nero?
            ''')

    case 'Tend√™ncia de Lan√ßamentos por Ano':
        st.subheader('üìà Tend√™ncia de Lan√ßamentos por Ano')
        tendencia_lancamentos(df_f)

    case 'G√™neros Mais Populares':
        st.subheader('üé≠ G√™neros Mais Populares')
        generos_populares(df_f)

    case 'Plataformas com Mais Lan√ßamentos':
        st.subheader('üíª Plataformas com Mais Lan√ßamentos')
        lancamentos_plataformas(df_f)

    case 'Top 10 Jogos por Vendas Globais':
        st.subheader('üèÜ Top 10 Jogos por Vendas Globais')
        vendas_globais(df_f)

    case 'Vendas por Regi√£o':
        st.subheader('üåç Vendas por Regi√£o')
        vendas_regiao(df_f)

    case 'Notas: Cr√≠ticos vs Usu√°rios':
        st.subheader('‚≠ê Correla√ß√£o de Notas: Cr√≠ticos vs Usu√°rios')
        correlacao_notas(df_f)

    case 'Vendas por Classifica√ß√£o Et√°ria (Rating)':
        st.subheader('üîû Vendas por Classifica√ß√£o Et√°ria')
        vendas_classificacao_etaria(df_f)

    case _:
        st.warning("Selecione uma an√°lise v√°lida na barra lateral.")
