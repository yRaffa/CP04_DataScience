import os
import streamlit as st
import pandas as pd
import plotly.express as px
from scipy.stats import ttest_ind

st.set_page_config(page_title='An√°lise de Dados - Games', page_icon='üìä', layout='wide')
st.sidebar.title('Navega√ß√£o')

def load_data():
    df = pd.read_csv('./games_db.csv')

    # Limpeza / Convers√£o de tipos
    df['Year_of_Release'] = pd.to_numeric(df['Year_of_Release'], errors='coerce').astype('Int64')
    df['Critic_Score'] = pd.to_numeric(df['Critic_Score'], errors='coerce')
    df['Critic_Count'] = pd.to_numeric(df['Critic_Count'], errors='coerce')
    df['User_Score'] = pd.to_numeric(df['User_Score'], errors='coerce')
    df['User_Count'] = pd.to_numeric(df['User_Count'], errors='coerce')

    for col in ['Name','Platform','Genre','Publisher','Developer','Rating']:
        if col in df.columns:
            df[col] = df[col].astype('string')

    # Converte vendas negativas para 0
    for c in ['NA_Sales','EU_Sales','JP_Sales','Other_Sales','Global_Sales']:
        if c in df.columns:
            df[c] = pd.to_numeric(df[c], errors='coerce').clip(lower=0)
    return df

df = load_data()
st.title('üìä An√°lise de Dados de Games')
st.divider()
st.caption('Escolha a An√°lise na Barra Lateral.')
st.caption('Use os Filtros Abaixo')

with st.expander('‚öôÔ∏è Filtros', expanded=False):
    if df['Year_of_Release'].dropna().empty:
        ano_inicial, ano_final = 1980, 2025
    else:
        ano_inicial = int(df['Year_of_Release'].dropna().min())
        ano_final = int(df['Year_of_Release'].dropna().max())
    periodo = st.slider('Ano de lan√ßamento', ano_inicial, ano_final, (ano_inicial, ano_final))

    plataformas = sorted(df['Platform'].dropna().unique().tolist()) if 'Platform' in df.columns else []
    generos = sorted(df['Genre'].dropna().unique().tolist())    if 'Genre' in df.columns else []
    publishers = sorted(df['Publisher'].dropna().unique().tolist()) if 'Publisher' in df.columns else []

    sel_plataformas = st.multiselect('Plataformas', plataformas, default=plataformas)
    sel_generos = st.multiselect('G√™neros',    generos,    default=generos)
    sel_publishers = st.multiselect('Publishers (opcional)', publishers, default=[])

# Aplica os Filtros
mask = (
    df['Year_of_Release'].between(periodo[0], periodo[1], inclusive='both')
) & (df['Platform'].isin(sel_plataformas)) & (df['Genre'].isin(sel_generos))
if sel_publishers:
    mask &= df['Publisher'].isin(sel_publishers)

df_f = df[mask].copy()

col_k1, col_k2, col_k3, col_k4 = st.columns(4)
with col_k1:
    st.metric('üéÆ Jogos', f'{len(df_f):,}'.replace(",", "."))
with col_k2:
    st.metric('üåç Vendas Globais (mi)', f"{df_f['Global_Sales'].sum():.2f}")
with col_k3:
    st.metric('üìÖ Per√≠odo', f'{periodo[0]}‚Äì{periodo[1]}')
with col_k4:
    st.metric('üß© G√™neros', f"{df_f['Genre'].nunique()}")

st.divider()

# An√°lise: tend√™ncia de lan√ßamentos por ano
def tendencia_lancamentos(data: pd.DataFrame):
    s = data.dropna(subset=['Year_of_Release']).groupby('Year_of_Release')['Name'].count().reset_index()
    if s.empty:
        st.info('Sem dados suficientes para esta visualiza√ß√£o.')
        return
    fig = px.line(
        s, x='Year_of_Release', y='Name', markers=True,
        title='Tend√™ncia de Lan√ßamentos por Ano',
        labels={'Year_of_Release': 'Ano', 'Name': 'Qtde de jogos'}
    )
    fig.update_layout(template='plotly_dark')
    st.plotly_chart(fig, use_container_width=True)

# An√°lise: g√™neros mais populares
def generos_populares(data: pd.DataFrame):
    s = data.groupby('Genre')['Name'].count().sort_values(ascending=False).reset_index()
    if s.empty:
        st.info('Sem dados suficientes para esta visualiza√ß√£o.')
        return
    fig = px.bar(
        s, x='Genre', y='Name', text='Name',
        title='G√™neros Mais Populares (por n¬∫ de jogos)',
        labels={'Genre': 'G√™nero', 'Name':'Qtde de jogos'}
    )
    fig.update_traces(textposition='outside')
    fig.update_layout(template='plotly_dark', xaxis_tickangle=30)
    st.plotly_chart(fig, use_container_width=True)

# An√°lise: plataformas com mais lan√ßamentos
def lancamentos_plataformas(data: pd.DataFrame):
    s = data.groupby('Platform')['Name'].count().sort_values(ascending=False).reset_index()
    if s.empty:
        st.info('Sem dados suficientes para esta visualiza√ß√£o.')
        return
    fig = px.bar(
        s, x='Platform', y='Name', text='Name',
        title='Plataformas com Mais Lan√ßamentos',
        labels={'Platform': 'Plataforma', 'Name':'Qtde de jogos'}
    )
    fig.update_traces(textposition='outside')
    fig.update_layout(template='plotly_dark')
    st.plotly_chart(fig, use_container_width=True)

# An√°lise: top 10 jogos por vendas globais
def vendas_globais(data: pd.DataFrame):
    top = (data[['Name','Platform','Global_Sales']]
           .dropna(subset=['Global_Sales'])
           .sort_values('Global_Sales', ascending=False)
           .head(10))
    if top.empty:
        st.info('Sem dados suficientes para esta visualiza√ß√£o.')
        return
    fig = px.bar(
        top[::-1],  # inverte para mostrar o 1¬∫ no topo
        x='Global_Sales', y='Name',
        orientation='h', text='Global_Sales',
        title='Top 10 Jogos por Vendas Globais (milh√µes)',
        labels={'Global_Sales':'Vendas globais (mi)', 'Name':'Jogo'}
    )
    fig.update_traces(texttemplate='%{text:.2f}')
    fig.update_layout(template='plotly_dark', yaxis={'categoryorder':'total ascending'})
    st.plotly_chart(fig, use_container_width=True)

# An√°lise: vendas por regi√£o
def vendas_regiao(data: pd.DataFrame):
    sales_cols = [c for c in ['NA_Sales','EU_Sales','JP_Sales','Other_Sales'] if c in data.columns]
    if not sales_cols:
        st.info('Colunas de vendas por regi√£o n√£o encontradas.')
        return
    s = data[sales_cols].sum().reset_index()
    s.columns = ['Regi√£o','Vendas']
    if s.empty:
        st.info('Sem dados suficientes para esta visualiza√ß√£o.')
        return
    fig = px.bar(
        s, x='Regi√£o', y='Vendas', text='Vendas',
        title='Distribui√ß√£o de Vendas por Regi√£o (milh√µes)',
        labels={'Vendas':'Vendas (mi)'}
    )
    fig.update_traces(texttemplate='%{text:.1f}', textposition='outside')
    fig.update_layout(template='plotly_dark')
    st.plotly_chart(fig, use_container_width=True)

# An√°lise: correla√ß√£o entre notas de cr√≠ticos e usu√°rios
def correlacao_notas(data: pd.DataFrame):
    d = data[['Critic_Score','User_Score','Name','Platform','Genre']].dropna()
    if d.empty:
        st.info('Sem dados suficientes de notas nos filtros atuais.')
        return
    d = d.assign(Critic_Score_10 = d['Critic_Score'] / 10.0)

    # tenta trendline OLS (statsmodels); se n√£o houver, mostra sem tend√™ncia
    try:
        fig = px.scatter(
            d, x='Critic_Score_10', y='User_Score',
            hover_data=['Name','Platform','Genre'],
            trendline='ols',
            title='Correla√ß√£o: Nota de Cr√≠ticos (0‚Äì10) x Usu√°rios (0‚Äì10)',
            labels={'Critic_Score_10':'Cr√≠ticos (0‚Äì10)', 'User_Score':'Usu√°rios (0‚Äì10)'}
        )
    except Exception:
        st.warning("Trendline OLS indispon√≠vel (instale 'statsmodels'). Exibindo scatter sem tend√™ncia.")
        fig = px.scatter(
            d, x='Critic_Score_10', y='User_Score',
            hover_data=['Name','Platform','Genre'],
            title='Correla√ß√£o: Nota de Cr√≠ticos (0‚Äì10) x Usu√°rios (0‚Äì10)',
            labels={'Critic_Score_10':'Cr√≠ticos (0‚Äì10)', 'User_Score':'Usu√°rios (0‚Äì10)'}
        )
    fig.update_layout(template='plotly_dark')
    st.plotly_chart(fig, use_container_width=True)

# An√°lise: vendas por classifica√ß√£o et√°ria
def vendas_classificacao_etaria(data: pd.DataFrame):
    if 'Rating' not in data.columns or data['Rating'].dropna().empty:
        st.info('Sem dados de classifica√ß√£o et√°ria (Rating) para os filtros atuais.')
        return
    s = data.dropna(subset=['Rating']).groupby('Rating')['Global_Sales'].sum().reset_index()
    s = s.sort_values('Global_Sales', ascending=False)
    if s.empty:
        st.info('Sem dados suficientes para esta visualiza√ß√£o.')
        return
    fig = px.bar(
        s, x='Rating', y='Global_Sales', text='Global_Sales',
        title='Vendas Globais por Classifica√ß√£o Et√°ria (milh√µes)',
        labels={'Rating':'Rating', 'Global_Sales':'Vendas (mi)'}
    )
    fig.update_traces(texttemplate='%{text:.1f}', textposition='outside')
    fig.update_layout(template='plotly_dark')
    st.plotly_chart(fig, use_container_width=True)

# Medidas centrais e distribui√ß√µes
def medidas_centrais(data: pd.DataFrame):
    # Notas de usu√°rios x cr√≠ticos
    st.subheader("‚≠ê Notas: Medidas Centrais e Correla√ß√£o")

    notas = data[['Critic_Score','User_Score']].dropna()
    if notas.empty:
        st.warning("Sem dados suficientes de notas para esta se√ß√£o.")
    else:
        # Normaliza a nota dos cr√≠ticos para a mesma escala 0‚Äì10
        notas = notas.assign(Critic_Score_10 = notas['Critic_Score'] / 10.0)

        # Medidas centrais das notas
        cs_mean = notas['Critic_Score_10'].mean()
        cs_median = notas['Critic_Score_10'].median()
        cs_std = notas['Critic_Score_10'].std()

        us_mean = notas['User_Score'].mean()
        us_median = notas['User_Score'].median()
        us_std = notas['User_Score'].std()

        c1, c2, c3 = st.columns(3)
        with c1:
            st.metric("Cr√≠ticos ‚Äî M√©dia (0‚Äì10)", f"{cs_mean:.2f}")
            st.metric("Usu√°rios ‚Äî M√©dia (0‚Äì10)", f"{us_mean:.2f}")
        with c2:
            st.metric("Cr√≠ticos ‚Äî Mediana (0‚Äì10)", f"{cs_median:.2f}")
            st.metric("Usu√°rios ‚Äî Mediana (0‚Äì10)", f"{us_median:.2f}")
        with c3:
            st.metric("Cr√≠ticos ‚Äî Desvio Padr√£o", f"{cs_std:.2f}")
            st.metric("Usu√°rios ‚Äî Desvio Padr√£o", f"{us_std:.2f}")

        # Correla√ß√£o (Pearson)
        corr = notas[['Critic_Score_10','User_Score']].corr().iloc[0,1]
        st.info(f"Coeficiente de correla√ß√£o entre notas de **Cr√≠ticos (0‚Äì10)** e **Usu√°rios (0‚Äì10)**: **{corr:.2f}**")

        # Scatter com trendline quando poss√≠vel
        try:
            fig_scatter = px.scatter(
                notas, x='Critic_Score_10', y='User_Score',
                title="Correla√ß√£o: Cr√≠ticos (0‚Äì10) x Usu√°rios (0‚Äì10)",
                labels={'Critic_Score_10':'Cr√≠ticos (0‚Äì10)', 'User_Score':'Usu√°rios (0‚Äì10)'},
                trendline='ols'
            )
        except Exception:
            st.warning("Trendline OLS indispon√≠vel (instale 'statsmodels'). Exibindo sem tend√™ncia.")
            fig_scatter = px.scatter(
                notas, x='Critic_Score_10', y='User_Score',
                title="Correla√ß√£o: Cr√≠ticos (0‚Äì10) x Usu√°rios (0‚Äì10)",
                labels={'Critic_Score_10':'Cr√≠ticos (0‚Äì10)', 'User_Score':'Usu√°rios (0‚Äì10)'},
            )
        fig_scatter.update_layout(template='plotly_dark')
        st.plotly_chart(fig_scatter, use_container_width=True)

    st.divider()

    # M√©dias de vendas por regi√£o
    st.subheader("üåç M√©dias de Vendas por Regi√£o")

    sales_cols = [c for c in ['NA_Sales','EU_Sales','JP_Sales','Other_Sales'] if c in data.columns]
    if not sales_cols:
        st.warning("Colunas de vendas regionais n√£o encontradas.")
        return

    means = data[sales_cols].mean().rename_axis("Regi√£o").reset_index(name="M√©dia_Vendas")
    fig_reg = px.bar(
        means, x='Regi√£o', y='M√©dia_Vendas', text='M√©dia_Vendas',
        title="M√©dias de Vendas por Regi√£o (mi por jogo)",
        labels={'M√©dia_Vendas':'M√©dia (mi)'}
    )
    fig_reg.update_traces(texttemplate='%{text:.2f}', textposition='outside')
    fig_reg.update_layout(template='plotly_dark')
    st.plotly_chart(fig_reg, use_container_width=True)

    # Insight autom√°tico sobre a ordem das regi√µes
    order = means.sort_values('M√©dia_Vendas', ascending=False)['Regi√£o'].tolist()
    ordem_str = " > ".join(order)
    st.caption(f"**Ordem das m√©dias por regi√£o (maior ‚Üí menor):** {ordem_str}")
    if all(r in order for r in ['NA_Sales','EU_Sales','JP_Sales']):
        if order.index('NA_Sales') < order.index('EU_Sales') < order.index('JP_Sales'):
            st.success("Nos dados filtrados, confirma-se: **NA > EU > JP**.")
        else:
            st.info("Para os filtros atuais, a ordem **NA > EU > JP** n√£o se mant√©m exatamente; veja o ranking acima.")

# Teste de hip√≥tese: jogos de A√ß√£o vendem mais que RPG?

def teste_acao_vs_rpg(data: pd.DataFrame):
    st.write("**H‚ÇÄ**: A m√©dia de vendas globais de jogos de A√ß√£o = m√©dia de RPG")
    st.write("**H‚ÇÅ**: A m√©dia de vendas globais de jogos de A√ß√£o > m√©dia de RPG")

    acao = data.loc[data['Genre'] == 'Action', 'Global_Sales'].dropna()
    rpg = data.loc[data['Genre'] == 'Role-Playing', 'Global_Sales'].dropna()

    if acao.empty or rpg.empty:
        st.warning("N√£o h√° dados suficientes para comparar A√ß√£o vs RPG.")
        return

    # teste t
    stat, p = ttest_ind(acao, rpg, alternative='greater', equal_var=False)

    st.write(f"Estat√≠stica t: **{stat:.3f}**")
    st.write(f"P-Valor: **{p:.5f}**")
    st.write(f"N√≠vel de Signific√¢ncia: **0.05 (5%)**")

    if p < 0.05:
        st.success("Rejeitamos H‚ÇÄ ‚Üí Jogos de A√ß√£o vendem significativamente mais que RPG (n√≠vel 5%).")
    else:
        st.info("N√£o rejeitamos H‚ÇÄ ‚Üí N√£o h√° evid√™ncia suficiente de que A√ß√£o venda mais que RPG.")

    # boxplot comparativo
    subset = data[data['Genre'].isin(['Action','Role-Playing'])]
    fig = px.box(subset, x='Genre', y='Global_Sales',
                 title="Distribui√ß√£o de Vendas Globais: A√ß√£o vs RPG",
                 labels={'Global_Sales': 'Vendas Globais (mi)', 'Genre': 'G√™nero'})
    fig.update_layout(template='plotly_dark')
    st.plotly_chart(fig, use_container_width=True)


# Teste de hip√≥tese: Jogos antigos (at√© 2010) vendem mais que jogos atuais (ap√≥s 2010)
def teste_jogos_antigos_vs_atuais(data: pd.DataFrame):
    st.write("**H‚ÇÄ**: A m√©dia de vendas globais de jogos at√© 2010 = m√©dia de vendas ap√≥s 2010")
    st.write("**H‚ÇÅ**: Jogos at√© 2010 vendem mais (m√©dia maior)")

    antigos = data.loc[data['Year_of_Release'] <= 2010, 'Global_Sales'].dropna()
    atuais = data.loc[data['Year_of_Release'] > 2010, 'Global_Sales'].dropna()

    if antigos.empty or atuais.empty:
        st.warning("N√£o h√° dados suficientes para comparar jogos antigos e atuais.")
        return

    # teste t
    stat, p = ttest_ind(antigos, atuais, alternative='greater', equal_var=False)

    st.write(f"Estat√≠stica t: **{stat:.3f}**")
    st.write(f"P-Valor: **{p:.5f}**")
    st.write(f"N√≠vel de Signific√¢ncia: **0.05 (5%)**")

    if p < 0.05:
        st.success("Rejeitamos H‚ÇÄ ‚Üí Jogos antigos (at√© 2010) vendem significativamente mais.")
    else:
        st.info("N√£o rejeitamos H‚ÇÄ ‚Üí N√£o h√° evid√™ncia suficiente de que jogos antigos vendam mais.")

    # boxplot comparativo
    subset = data[data['Year_of_Release'].notna()].copy()
    subset['Era'] = subset['Year_of_Release'].apply(lambda x: 'At√© 2010' if x <= 2010 else 'Ap√≥s 2010')
    fig = px.box(subset, x='Era', y='Global_Sales',
                 title="Distribui√ß√£o de Vendas Globais: Jogos Antigos vs Atuais",
                 labels={'Global_Sales': 'Vendas Globais (mi)', 'Era': 'Per√≠odo'})
    fig.update_layout(template='plotly_dark')
    st.plotly_chart(fig, use_container_width=True)


#Visao geral dos dados
def visao_geral():
    st.subheader('üìå Vis√£o Geral dos Dados')
    with st.expander('Visualizar amostra da base', expanded=False):
        st.dataframe(df_f.head(25), use_container_width=True)

analises = st.sidebar.radio(
    'Escolha a an√°lise',
    [
        'Vis√£o Geral',
        'Tend√™ncia de Lan√ßamentos por Ano',
        'G√™neros Mais Populares',
        'Plataformas com Mais Lan√ßamentos',
        'Top 10 Jogos por Vendas Globais',
        'Vendas por Regi√£o',
        'Notas: Cr√≠ticos vs Usu√°rios',
        'Vendas por Classifica√ß√£o Et√°ria',
        'Medidas Centrais & Distribui√ß√µes',
        'Teste de Hip√≥tese'
    ],
    index=0
)

def mostrar_dicionario_variaveis():
    data = [('Name', 'Qualitativa', 'Nominal', 'Nome do Jogo ‚Üí Identifica√ß√£o sem Hierarquia'),
            ('Platform', 'Qualitativa', 'Nominal', 'Plataforma ‚Üí Categorias sem Hierarquia'),
            ('Year_of_Release', 'Quantitativa', 'Discreta', 'Ano de Lan√ßamento ‚Üí N√∫meros Inteiros'),
            ('Genre', 'Qualitativa', 'Nominal', 'G√™nero do Jogo ‚Üí Categorias sem Hierarquia'),
            ('Publisher', 'Qualitativa', 'Nominal', 'Nome da Empresa Publicadora ‚Üí Identifica√ß√£o sem Hierarquia'),
            ('Developer', 'Qualitativa', 'Nominal', 'Nome do Est√∫dio Desenvolvedor ‚Üí Identifica√ß√£o sem Hierarquia'),
            ('Rating', 'Qualitativa', 'Ordinal', 'Classifica√ß√£o Et√°ria (ESRB) ‚Üí Classifica√ß√£o com Ordem Impl√≠cita'),
            ('NA_Sales', 'Quantitativa', 'Cont√≠nua', 'Vendas na Am√©rica do Norte (Milh√µes) ‚Üí N√∫meros Reais, pode ter Decimais'),
            ('EU_Sales', 'Quantitativa', 'Cont√≠nua', 'Vendas na Europa (Milh√µes) ‚Üí N√∫meros Reais, pode ter Decimais'),
            ('JP_Sales', 'Quantitativa', 'Cont√≠nua', 'Vendas no Jap√£o (Milh√µes) ‚Üí N√∫meros Reais, pode ter Decimais'),
            ('Other_Sales', 'Quantitativa', 'Cont√≠nua', 'Vendas em Outras Regi√µes (Milh√µes) ‚Üí N√∫meros Reais, pode ter Decimais'),
            ('Global_Sales', 'Quantitativa', 'Cont√≠nua', 'Soma das Vendas Globais (Milh√µes) ‚Üí N√∫meros Reais, pode ter Decimais'),
            ('Critic_Score', 'Quantitativa', 'Cont√≠nua', 'Nota M√©dia de Cr√≠ticos (0‚Äì100) ‚Üí N√∫meros Reais, pode ter Decimais'),
            ('Critic_Count', 'Quantitativa', 'Discreta', 'N√∫mero de Cr√≠ticos ‚Üí N√∫meros Inteiros'),
            ('User_Score', 'Quantitativa', 'Cont√≠nua', 'Nota M√©dia de Usu√°rios (0‚Äì10), ‚Üí N√∫meros Reais, pode ter Decimais'),
            ('User_Count', 'Quantitativa', 'Discreta', 'N√∫mero de Usu√°rios ‚Üí N√∫meros Inteiros')]
    df_dict = pd.DataFrame(data, columns=['Coluna', 'Tipo', 'Subtipo', 'Descri√ß√£o'])
    st.dataframe(df_dict, use_container_width=True)

# Switch-case para exibir a an√°lise escolhida
match analises:
    case 'Vis√£o Geral':
        st.subheader('üìå Vis√£o Geral dos Dados')
        st.write('Base de dados: Vendas e An√°lises de Jogos *(1980 - 2020)*')
        with st.expander('Visualizar amostra da base', expanded=False):
            st.dataframe(df_f.head(25), use_container_width=True)
        st.divider()
        st.subheader('üìã Identifica√ß√£o dos Tipos das Vari√°veis & Descri√ß√£o das Colunas')
        mostrar_dicionario_variaveis()
        st.divider()
        st.subheader('‚ùî Principais Perguntas da An√°lise de Dados')
        col1, col2 = st.columns(2)
        with col1:
            st.markdown('''
            >**1. Tend√™ncia de Lan√ßamentos por Ano**
            - Quais anos tiveram picos ou quedas significativas?
            - Existe uma tend√™ncia de crescimento ou decl√≠nio no n√∫mero de lan√ßamentos?
            \n
            >**2. G√™neros Mais Populares**
            - Quais s√£o os g√™neros mais populares em termos de lan√ßamentos?
            - Quais g√™neros geram mais vendas globais?
            \n
            >**3. Plataformas com Mais Lan√ßamentos**
            - Quais plataformas t√™m o maior n√∫mero de lan√ßamentos?
            - Existe uma correla√ß√£o entre o n√∫mero de lan√ßamentos e as vendas globais por plataforma?
            \n
            >**4. Vendas por Regi√£o**
            - Quais regi√µes apresentam as maiores vendas de jogos?
            - Existem diferen√ßas significativas nas prefer√™ncias de jogos entre regi√µes?
            ''')
        with col2:
            st.markdown('''
            >**5. Notas: Cr√≠ticos vs Usu√°rios**
            - Quais jogos apresentam maior discrep√¢ncia entre as avalia√ß√µes de cr√≠ticos e usu√°rios?
            - As notas influenciam as vendas globais dos jogos?
            \n
            >**6. Vendas por Classifica√ß√£o Et√°ria**
            - Quais classifica√ß√µes et√°rias (ESRB) geram mais vendas?
            - Como a distribui√ß√£o de vendas por classifica√ß√£o et√°ria mudou ao longo do tempo?
            \n
            >**7. Publicadoras e Desenvolvedoras**
            - Quais publicadoras e desenvolvedoras lan√ßaram mais jogos?
            - Quais publicadoras t√™m os jogos mais bem avaliados?
            \n
            >**8. Jogos de Maior Sucesso**
            - Quais jogos tiveram as maiores vendas globais?
            - Quais s√£o os jogos mais populares por g√™nero?
            ''')

    case 'Tend√™ncia de Lan√ßamentos por Ano':
        st.subheader('üìà Tend√™ncia de Lan√ßamentos por Ano')
        tendencia_lancamentos(df_f)
        st.markdown('''
        - O auge dos lan√ßamentos foi entre 2005 e 2015, chegando a um pico de 1427 jogos em 2008.
        - Ap√≥s 2016 houve uma queda brusca nos registros, com pouqu√≠ssimos lan√ßamentos em 2017 e 2020.
        Provavelmente isso se deve ao jogos estarem ficando cada vez mais caros e demorados de produzir.
        \n
        üí° **Insight:** O per√≠odo de ouro do mercado foi a d√©cada de 2000, marcado pela expans√£o do PS2, Wii e DS.
        ''')

    case 'G√™neros Mais Populares':
        st.subheader('üé≠ G√™neros Mais Populares')
        generos_populares(df_f)
        st.markdown('''
        - A√ß√£o (Action) √© o g√™nero dominante (3.370 jogos).
        - Em seguida v√™m Esportes (Sports), Misc (Party/Casual), RPGs e Shooter.
        \n
        üí° **Insight:** Jogos de a√ß√£o e esportes s√£o os mais produzidos, mas RPG e Shooters representam nichos muito fortes em vendas.
        ''')

    case 'Plataformas com Mais Lan√ßamentos':
        st.subheader('üíª Plataformas com Mais Lan√ßamentos')
        lancamentos_plataformas(df_f)
        st.markdown('''
        - PS2 (2161 jogos) e Nintendo DS (2152 jogos) s√£o os campe√µes em n√∫mero de lan√ßamentos.
        - Seguem PS3, Wii e Xbox 360, mostrando a for√ßa da gera√ß√£o 2005‚Äì2013.
        \n
        üí° **Insight:** Consoles da Sony e Nintendo dominaram em quantidade de t√≠tulos.
        ''')

    case 'Top 10 Jogos por Vendas Globais':
        st.subheader('üèÜ Top 10 Jogos por Vendas Globais')
        vendas_globais(df_f)
        st.markdown('''
        üí° **Insight:** O top 10 √© dominado pela Nintendo, com foco em jogos casuais e familiares.
        ''')

    case 'Vendas por Regi√£o':
        st.subheader('üåç Vendas por Regi√£o')
        vendas_regiao(df_f)
        st.markdown('''
        - Am√©rica do Norte (4402M) √© o maior mercado.
        - Europa (2425M) em segundo, seguida pelo Jap√£o (1297M).
        - Outras regi√µes representam 791M.
        \n
        üí° **Insight:** NA √© o maior consumidor de jogos, mas o Jap√£o se destaca em exclusivos e g√™neros espec√≠ficos (RPGs, por exemplo).
        ''')

    case 'Notas: Cr√≠ticos vs Usu√°rios':
        st.subheader('‚≠ê Correla√ß√£o de Notas: Cr√≠ticos vs Usu√°rios')
        correlacao_notas(df_f)
        st.markdown('''
        - Correla√ß√£o = 0.58 (moderada positiva).
        \n
        üí° **Insight:** Jogos bem avaliados pela cr√≠tica tendem a agradar os jogadores tamb√©m, 
        mas h√° discrep√¢ncias (nem sempre o que a cr√≠tica gosta √© o que os jogadores compram).
        ''')

    case 'Vendas por Classifica√ß√£o Et√°ria':
        st.subheader('üîû Vendas por Classifica√ß√£o Et√°ria')
        vendas_classificacao_etaria(df_f)
        st.markdown('''
        - E (Everyone) lidera com 2437M vendas globais.
        - Seguem T (Teen) com 1494M e M (Mature) com 1474M.
        - Ratings menores (E10+, AO, EC) t√™m pouco impacto.
        \n
        üí° **Insight:** Jogos para todas as idades (E) dominam em vendas, confirmando o apelo familiar, mas T e M tamb√©m t√™m grande mercado.
        ''')

    case 'Medidas Centrais & Distribui√ß√µes':
        st.subheader('üìä Medidas Centrais e Distribui√ß√µes')
        medidas_centrais(df_f)

    case 'Teste de Hip√≥tese':
        st.subheader('üéÆ Teste de Hip√≥tese: A√ß√£o vs RPG')
        teste_acao_vs_rpg(df_f)
        st.divider()
        st.subheader('üéÆ Teste de Hip√≥tese: Jogos Antigos (at√© 2010) vs Atuais (ap√≥s 2010)')
        teste_jogos_antigos_vs_atuais(df_f)

    case _:
        st.warning('Selecione uma an√°lise v√°lida na barra lateral.')
